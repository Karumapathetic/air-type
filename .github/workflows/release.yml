name: Release binaries

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MIRROR_URL: git@github.com:EpitechPromo2027/B-CPP-500-BDX-5-1-rtype-baptiste.caulier.git

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    if: startsWith(github.event.head_commit.message, 'v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache build client
        uses: actions/cache@v3
        with:
          path: ./client/build
          key: ${{ runner.os }}-client-${{ hashFiles('**/client/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-client-

      - name: Cache build server
        uses: actions/cache@v3
        with:
          path: ./server/build
          key: ${{ runner.os }}-server-${{ hashFiles('**/server/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-server-

      - name: Build client
        run: ./build.sh client

      - name: Build server
        run: ./build.sh server

      - name: Check binaries
        run: |
          if [ ! -f ./rtype_client ]; then
            echo "::error file=./rtype_client::Client binary does not exist"
            exit 1
          elif [ ! -f ./rtype_server ]; then
            echo "::error file=./rtype_server::Server binary does not exist"
            exit 1
          else
            echo "::notice::All binaries OK"
          fi

      - name: Bundle Binary
        run: tar -czf rtype-${{ github.sha }}-linux.tar.gz rtype_client rtype_server

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: rtype_binaries_${{ github.sha }}_linux
          path: rtype-${{ github.sha }}-linux.tar.gz

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    if: startsWith(github.event.head_commit.message, 'v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache build client
        uses: actions/cache@v3
        with:
          path: ./client/build
          key: ${{ runner.os }}-client-${{ hashFiles('**/client/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-client-

      - name: Cache build server
        uses: actions/cache@v3
        with:
          path: ./server/build
          key: ${{ runner.os }}-server-${{ hashFiles('**/server/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-server-

      - name: Build client
        run: ./build.ps1 client

      - name: Build server
        run: ./build.ps1 server

      - name: Check binaries
        run: |
          if (-Not (Test-Path "./rtype_client.exe")) {
            Write-Host "Client binary does not exist"
            exit 1
          } elseif(-Not (Test-Path "./rtype_client.exe")) {
            Write-Host "Client binary does not exist"
            exit 1
          } else {
            Write-Host "All binaries OK"
          }

      - name: Bundle Binary
        run: tar -czf rtype-${{ github.sha }}-windows.tar.gz rtype_client.exe rtype_server.exe

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: rtype_binaries_${{ github.sha }}_windows
          path: rtype-${{ github.sha }}-windows.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]

    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v4

      - name: Unbundle Binaries
        run: |
          7z x rtype_binaries_${{ github.sha }}_linux
          7z x rtype_binaries_${{ github.sha }}_windows

      - name: Ensure Unbundled Content
        run: |
          gzip rtype-${{ github.sha }}-linux.tar
          gzip rtype-${{ github.sha }}-windows.tar

      - name: Store Release Version
        run: |
          IFS=":" read -r version _ <<< "${{ github.event.head_commit.message }}"
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV

      - name: Create Release Linux
        uses: svenstaro/upload-release-action@v2
        with:
          file: rtype-${{ github.sha }}-linux.tar.gz
          release_name: RType ${{ env.RELEASE_VERSION }}
          tag: ${{ env.RELEASE_VERSION }}

      - name: Create Release Windows
        uses: svenstaro/upload-release-action@v2
        with:
          file: rtype-${{ github.sha }}-windows.tar.gz
          release_name: RType ${{ env.RELEASE_VERSION }}
          tag: ${{ env.RELEASE_VERSION }}

  mirror:
    name: Push to Mirror
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.MIRROR_KEY }}
